# response & request
type BaseResponse {
    code: String!
    message: String!
    success: Boolean!
}

type ErrorResponse {
    code: String!
    message: String!
}

input PaginationRequest {
    limit: Int
    cursor: Int!
}

type PaginationResponse {
    limit: Int
    previous_cursor: Int
    next_cursor: Int
    total_data: Int
}

input UserRegisterRequest {
    username: String!
    email: String!
    password: String!
    fullname: String!
    address: String
    province_id: Int
    city_id: Int
    district_id: Int
}

union AuthResponse = Token | ErrorResponse

input SaveShopRequest {
    name: String!
    description: String
    address: String
    province_id: Int!
    district_id: Int!
    city_id: Int!
    postal_code: Int!
    coordinate: String!
    icon: String
    opened_at: String
    closed_at: String
}

union ShopsResponse = ShopList | ErrorResponse

type ShopList {
    shops: [Shop]
    pagination: PaginationResponse
}

union ProfileResponse = UserSingleResult | ErrorResponse

type UserSingleResult {
    user: User
    details: UserDetail
}

# models
type Token {
    jwt: String!
}

type User {
    id: Int
    username: String
    email: String
    created_at: String
    updated_at: String
}

type UserDetail {
    id: Int
    user_id: Int
    fullname: String
    address: String
    postal_code: String
    province: Province
    district: District
    city: City
    created_at: String
    updated_at: String
}

type Province {
    id: Int!
    name: String!
}

type District {
    id: Int!
    name: String!
}

type City {
    id: Int!
    name: String!
}

type Shop {
    id: Int
    user_id: Int!
    name: String!
    description: String
    address: String
    province_id: Int!
    district_id: Int!
    city_id: Int!
    postal_code: Int!
    coordinate: String!
    icon: String
    opened_at: String
    closed_at: String
    created_at: String
    updated_at: String
}

# action
type Query {
    version: String!
    me: ProfileResponse
    shops(pagination: PaginationRequest, q: String): ShopsResponse
}

type Mutation {
    # auth
    register(user: UserRegisterRequest): AuthResponse
    login(username: String!, password: String!): AuthResponse
    logout(token: String!): ErrorResponse

    # shop
    saveShop(shop: SaveShopRequest): ShopsResponse
}